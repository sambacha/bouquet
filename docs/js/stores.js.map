{"version":3,"file":"stores.js","sourceRoot":"","sources":["../ts/stores.ts"],"names":[],"mappings":"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","sourcesContent":["import { useComputed, useSignal } from '@preact/signals'\nimport { utils, Wallet } from 'ethers'\nimport { MEV_RELAY_MAINNET } from './constants.js'\nimport { getMaxBaseFeeInFutureBlock } from './library/bundleUtils.js'\nimport { EthereumAddress } from './types/ethereumTypes.js'\nimport { ProviderStore } from './library/provider.js'\nimport { AppSettings, BlockInfo, Bundle, serialize, Signers } from './types/types.js'\nimport { TransactionList } from './types/bouquetTypes.js'\n\nfunction fetchBurnerWalletFromStorage() {\n\tconst burnerPrivateKey = localStorage.getItem('wallet')\n\ttry {\n\t\treturn burnerPrivateKey ? new Wallet(burnerPrivateKey) : Wallet.createRandom()\n\t} catch {\n\t\treturn Wallet.createRandom()\n\t}\n}\n\nfunction fetchBundleFromStorage(): Bundle | undefined {\n\tconst payload = JSON.parse(localStorage.getItem('payload') ?? 'null')\n\tif (!payload) return undefined\n\tconst tryParse = TransactionList.safeParse(payload)\n\tif (!tryParse.success) {\n\t\tlocalStorage.removeItem('payload')\n\t\treturn undefined\n\t}\n\tconst parsed = tryParse.value\n\n\tconst containsFundingTx = parsed.length > 1 && parsed[0].to === parsed[1].from\n\tconst uniqueSigners = [...new Set(parsed.map((x) => utils.getAddress(serialize(EthereumAddress, x.from))))].filter(\n\t\t(_, index) => !(index === 0 && containsFundingTx),\n\t)\n\tconst totalGas = parsed.reduce((sum, tx, index) => (index === 0 && containsFundingTx ? 21000n : BigInt(tx.gasLimit.toString()) + sum), 0n)\n\t// @TODO: Change this to track minimum amount of ETH needed to deposit\n\tconst inputValue = parsed.reduce((sum, tx, index) => (index === 0 && containsFundingTx ? 0n : BigInt(tx.value.toString()) + sum), 0n)\n\n\treturn { transactions: parsed, containsFundingTx, uniqueSigners, totalGas, inputValue }\n}\n\nfunction fetchSettingsFromStorage() {\n\tconst defaultValues: AppSettings = { blocksInFuture: 3n, priorityFee: 10n ** 9n * 3n, relayEndpoint: MEV_RELAY_MAINNET };\n\tconst custom = localStorage.getItem('bouquetSettings')\n\tif (!custom) {\n\t\treturn defaultValues\n\t} else {\n\t\ttry {\n\t\t\tconst parsed = JSON.parse(custom)\n\t\t\tif ('relayEndpoint' in parsed) defaultValues.relayEndpoint = parsed.relayEndpoint\n\t\t\tif ('priorityFee' in parsed) defaultValues.priorityFee = BigInt(parsed.priorityFee)\n\t\t\tif ('blocksInFuture' in parsed) defaultValues.blocksInFuture = BigInt(parsed.blocksInFuture)\n\t\t\treturn defaultValues\n\t\t} catch {\n\t\t\treturn defaultValues\n\t\t}\n\t}\n}\n\nexport function createGlobalState() {\n\tconst appSettings = useSignal<AppSettings>(fetchSettingsFromStorage())\n\tconst provider = useSignal<ProviderStore | undefined>(undefined)\n\tconst blockInfo = useSignal<BlockInfo>({ blockNumber: 0n, baseFee: 0n, priorityFee: 10n ** 9n * 3n })\n\tconst signers = useSignal<Signers>({ burner: fetchBurnerWalletFromStorage(), burnerBalance: 0n, bundleSigners: {} })\n\tconst bundle = useSignal<Bundle | undefined>(fetchBundleFromStorage())\n\n\t// Sync burnerWallet to localStorage\n\tsigners.subscribe(({ burner }) => {\n\t\tif (burner) localStorage.setItem('wallet', burner.privateKey)\n\t\telse localStorage.removeItem('wallet')\n\t})\n\n\tconst fundingAmountMin = useComputed(() => {\n\t\tif (!bundle.value) return 0n\n\t\tif (!bundle.value.containsFundingTx) return 0n\n\t\tconst maxBaseFee = getMaxBaseFeeInFutureBlock(blockInfo.value.baseFee, appSettings.value.blocksInFuture)\n\t\treturn bundle.value.totalGas * (blockInfo.value.priorityFee + maxBaseFee) + bundle.value.inputValue\n\t})\n\n\treturn { provider, blockInfo, bundle, appSettings, signers, fundingAmountMin }\n}\n"]}