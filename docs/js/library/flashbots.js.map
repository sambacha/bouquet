{"version":3,"file":"flashbots.js","sourceRoot":"","sources":["../../ts/library/flashbots.ts"],"names":[],"mappings":"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","sourcesContent":["import { utils } from 'ethers'\nimport { AppSettings, BlockInfo, Bundle, Signers } from '../types/types.js'\nimport { createBundleTransactions, getMaxBaseFeeInFutureBlock, signBundle } from './bundleUtils.js'\nimport { ProviderStore } from './provider.js'\n\ninterface TransactionSimulationBase {\n\ttxHash: string\n\tgasUsed: number\n\tgasFees: string\n\tgasPrice: string\n\ttoAddress: string\n\tfromAddress: string\n\tcoinbaseDiff: string\n}\n\nexport interface TransactionSimulationSuccess extends TransactionSimulationBase {\n\tvalue: string\n\tethSentToCoinbase: string\n}\n\nexport interface TransactionSimulationRevert extends TransactionSimulationBase {\n\terror: string\n\trevert: string\n}\n\nexport type TransactionSimulation = TransactionSimulationSuccess | TransactionSimulationRevert\n\nexport interface RelayResponseError {\n\terror: {\n\t\tmessage: string\n\t\tcode: number\n\t}\n}\n\nexport interface SimulationResponseSuccess {\n\tbundleGasPrice: BigInt\n\tbundleHash: string\n\tcoinbaseDiff: BigInt\n\tethSentToCoinbase: BigInt\n\tgasFees: BigInt\n\tresults: Array<TransactionSimulation>\n\ttotalGasUsed: number\n\tstateBlockNumber: number\n\tfirstRevert?: TransactionSimulation\n}\n\nexport type SimulationResponse = SimulationResponseSuccess | RelayResponseError\n\nexport async function simulateBundle(\n\tbundle: Bundle,\n\tfundingAmountMin: bigint,\n\tprovider: ProviderStore,\n\tsigners: Signers,\n\tblockInfo: BlockInfo,\n\tappSettings: AppSettings\n) {\n\tif (appSettings.blocksInFuture <= 0n) throw new Error('Blocks in future is negative or zero')\n\n\tconst maxBaseFee = getMaxBaseFeeInFutureBlock(blockInfo.baseFee, appSettings.blocksInFuture)\n\tconst txs = await signBundle(\n\t\tawait createBundleTransactions(bundle, signers, blockInfo, appSettings.blocksInFuture, fundingAmountMin),\n\t\tprovider.provider,\n\t\tblockInfo,\n\t\tmaxBaseFee,\n\t)\n\n\tconst payload = JSON.stringify({ jsonrpc: '2.0', method: 'eth_callBundle', params: [{ txs, blockNumber: `0x${blockInfo.blockNumber.toString(16)}`, stateBlockNumber: 'latest' }] })\n\tconst flashbotsSig = `${await provider.authSigner.getAddress()}:${await provider.authSigner.signMessage(utils.id(payload))}`\n\tconst request = await fetch(appSettings.relayEndpoint,\n\t\t{ method: 'POST', body: payload, headers: { 'Content-Type': 'application/json', 'X-Flashbots-Signature': flashbotsSig } }\n\t)\n\tconst response = await request.json()\n\n\tif (response.error !== undefined && response.error !== null) {\n\t\treturn {\n\t\t\terror: {\n\t\t\t\tmessage: response.error.message,\n\t\t\t\tcode: response.error.code,\n\t\t\t},\n\t\t}\n\t}\n\n\tconst callResult = response.result\n\treturn {\n\t\tbundleGasPrice: BigInt(callResult.bundleGasPrice),\n\t\tbundleHash: callResult.bundleHash,\n\t\tcoinbaseDiff: BigInt(callResult.coinbaseDiff),\n\t\tethSentToCoinbase: BigInt(callResult.ethSentToCoinbase),\n\t\tgasFees: BigInt(callResult.gasFees),\n\t\tresults: callResult.results,\n\t\tstateBlockNumber: callResult.stateBlockNumber,\n\t\ttotalGasUsed: callResult.results.reduce((a: number, b: TransactionSimulation) => a + b.gasUsed, 0),\n\t\tfirstRevert: callResult.results.find((txSim: TransactionSimulation) => 'revert' in txSim || 'error' in txSim),\n\t}\n}\n\nexport async function sendBundle(bundle: Bundle, targetBlock: bigint, fundingAmountMin: bigint, provider: ProviderStore, signers: Signers, blockInfo: BlockInfo, appSettings: AppSettings) {\n\tif (appSettings.blocksInFuture <= 0n) throw new Error('Blocks in future is negative or zero')\n\n\tconst maxBaseFee = getMaxBaseFeeInFutureBlock(blockInfo.baseFee, appSettings.blocksInFuture)\n\tconst txs = await signBundle(\n\t\tawait createBundleTransactions(bundle, signers, blockInfo, appSettings.blocksInFuture, fundingAmountMin),\n\t\tprovider.provider,\n\t\tblockInfo,\n\t\tmaxBaseFee,\n\t)\n\n\tconst payload = JSON.stringify({ jsonrpc: '2.0', method: 'eth_sendBundle', params: [{ txs, blockNumber: `0x${targetBlock.toString(16)}`, revertingTxHashes: [] }] })\n\tconst flashbotsSig = `${await provider.authSigner.getAddress()}:${await provider.authSigner.signMessage(utils.id(payload))}`\n\tconst request = await fetch(appSettings.relayEndpoint,\n\t\t{ method: 'POST', body: payload, headers: { 'Content-Type': 'application/json', 'X-Flashbots-Signature': flashbotsSig } }\n\t)\n\tconst response = await request.json()\n\n\tif (response.error !== undefined && response.error !== null) {\n\t\tthrow {\n\t\t\tmessage: response.error.message,\n\t\t\tcode: response.error.code,\n\t\t}\n\t}\n\n\tconst bundleTransactions = txs.map((signedTransaction) => {\n\t\tconst transactionDetails = utils.parseTransaction(signedTransaction)\n\t\treturn {\n\t\t\tsignedTransaction,\n\t\t\thash: utils.keccak256(signedTransaction),\n\t\t\taccount: transactionDetails.from || '0x0',\n\t\t\tnonce: BigInt(transactionDetails.nonce),\n\t\t}\n\t})\n\n\treturn {\n\t\tbundleTransactions,\n\t\tbundleHash: response.result.bundleHash,\n\t}\n}\n\nexport async function checkBundleInclusion(transactions: { hash: string }[], provider: ProviderStore) {\n\tconst receipts = await Promise.all(transactions.map((tx) => provider.provider.getTransactionReceipt(tx.hash)))\n\treturn { transactions, included: receipts.filter(x => x === null).length === 0 }\n}\n"]}